#------------------------------------------------------------------------------#

#VERSION="v2023052600"			# das Profil fullhd konnte nicht aufgerufen werden / ein neues universelles Profil ist dazu gekommen, bei dem eine Auflösung frei gewählt werden kann
#VERSION="v2024040100"			# Fehler bei der Verarbeitung mit IST_PAR, IST_DAR, ORIG_DAR_BREITE und ORIG_DAR_HOEHE behoben
#VERSION="v2024050100"			# Chrom-Leisten poliert
VERSION="v2024051500"			# mit -soll_dar kann jetzt das Display-Format, des zu erstellenden Videos angegeben werden

echo "# 10 Video
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#==============================================================================#
### Korrektur: gelesene IN-Daten mit übergebenen IST-Daten überschreiben
###
### Es wird unbedingt das Rasterformat der Bildgröße (Breite x Höhe) benötigt!
###
### Weiterhin wird das Seitenverhältnis des Bildes (DAR) benötigt,
### dieser Wert kann aber auch aus dem Seitenverhältnis der Bildpunkte (PAR/SAR)
### errechnet werden.
###
### Sollte die Bildgröße bzw. DAR+PAR/SAR fehlen, bricht die Bearbeitung ab!
###
### zum Beispiel:
###	IN_XY  = 720 x 576 (Rasterformat der Bildgröße)
###	IN_PAR =  15 / 16  (PAR / SAR)
###	IN_DAR =   4 / 3   (DAR)
###
#------------------------------------------------------------------------------#
### Hier wird versucht dort zu interpolieren, wo es erforderlich ist.
### Es kann jedoch von den vier Werten (Breite+Höhe+DAR+PAR) nur einer
### mit Hilfe der drei vorhandenen Werte interpoliert werden.

#------------------------------------------------------------------------------#
### Rasterformat der Bildgröße

if [ -n "${IST_XY}" ] ; then
	IN_XY="${IST_XY}"
fi


if [ -z "${IN_XY}" ] ; then
	echo "# 20 Video"
	echo "Es konnte die Video-Auflösung nicht ermittelt werden."
	echo "versuchen Sie es mit diesem Parameter nocheinmal:"
	echo "-in_xmaly"
	echo "z.B. (PAL)     : -in_xmaly 720x576"
	echo "z.B. (NTSC)    : -in_xmaly 720x486"
	echo "z.B. (NTSC-DVD): -in_xmaly 720x480"
	echo "z.B. (iPad)    : -in_xmaly 1024x576"
	echo "z.B. (HDTV)    : -in_xmaly 1280x720"
	echo "z.B. (HD)      : -in_xmaly 1920x1080"
	echo "ABBRUCH!"
	exit 30
fi

echo "# 40 Video
# SOLL_DAR='${SOLL_DAR}'
# IN_XY='${IN_XY}'
# IN_BREIT='${IN_BREIT}'
# IN_HOCH='${IN_HOCH}'
# O_BREIT='${O_BREIT}'
# O_HOCH='${O_HOCH}'

# IST_XY='${IST_XY}'
# IN_DAR='${IN_DAR}'
# IN_PAR='${IST_PAR}'
# IST_DAR='${IST_DAR}'
# IST_PAR='${IST_PAR}'
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 50

#------------------------------------------------------------------------------#
### Seitenverhältnis des Bildes (DAR)

if [ x != "x${IST_DAR}" ] ; then
	IN_DAR="${IST_DAR}"
fi

#----------------------------------------------------------------------#
### Seitenverhältnis der Bildpunkte (PAR / SAR)

if [ x != "x${IST_PAR}" ] ; then
	IN_PAR="${IST_PAR}"
fi

#----------------------------------------------------------------------#
### Seitenverhältnis der Bildpunkte - Arbeitswerte berechnen (PAR / SAR)

ARBEITSWERTE_PAR()
{
if [ x != "x${IN_PAR}" ] ; then
	PAR="$(echo "${IN_PAR}" | grep -E '[:/]')"
	if [ x = "x${PAR}" ] ; then
		PAR="$(echo "${IN_PAR}" | grep -F '.')"
		PAR_KOMMA="${PAR}"
		PAR_FAKTOR="$(echo "${PAR}" | grep -F '.' | awk '{printf "%u\n", $1*100000}')"
	else
		PAR_KOMMA="$(echo "${PAR}" | grep -E '[:/]' | awk '{gsub("[:/]"," ");print $1/$2}')"
		PAR_FAKTOR="$(echo "${PAR}" | grep -E '[:/]' | awk '{gsub("[:/]"," ");printf "%u\n", ($1*100000)/$2}')"
	fi
fi
}

ARBEITSWERTE_PAR

echo "# 60 Video
# IN_BREIT='${IN_BREIT}'
# IN_HOCH='${IN_HOCH}'
# IN_XY='${IN_XY}'
# IN_DAR='${IN_DAR}'
# IN_PAR='${IST_PAR}'
# IST_DAR='${IST_DAR}'
# IST_PAR='${IST_PAR}'
# PAR='${PAR}'
# PAR_FAKTOR='${PAR_FAKTOR}'
# PAR_KOMMA='${PAR_KOMMA}'
# VIDEO_SPUR='${VIDEO_SPUR}'
# VIDEO_NICHT_UEBERTRAGEN='${VIDEO_NICHT_UEBERTRAGEN}'
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 70

#----------------------------------------------------------------------#
### Kontrolle Seitenverhältnis des Bildes (DAR)

if [ x = "x${IN_DAR}" -o x != "x${IST_PAR}" ] ; then
	IN_DAR="$(echo "${IN_BREIT} ${IN_HOCH} ${PAR_KOMMA}" | awk '{printf("%.16f\n",($1*$3)/$2)}')"

	echo "# 80 Video
	IN_BREIT='${IN_BREIT}'
	IN_HOCH='${IN_HOCH}'
	IN_DAR='${IN_DAR}'
	" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
fi

INDAR="$(echo "${IN_DAR}" | grep -E '[:/]')"
if [ x = "x${INDAR}" ] ; then
	IN_DAR="${IN_DAR}/1"
fi

if [ x != "x${IST_PAR}" ] ; then
	IST_DAR="${IN_DAR}"
fi

O_DAR="${IN_DAR}"
ODAR="$(echo "${O_DAR}" | grep -E '[:/]')"
if [ -n "${ODAR}" ] ; then
	O_DAR_1="$(echo "${O_DAR}" | grep -E '[:/]' | awk '{gsub("[:/]"," ");print $1}')"
	O_DAR_2="$(echo "${O_DAR}" | grep -E '[:/]' | awk '{gsub("[:/]"," ");print $2}')"
else
	O_DAR_1="${O_DAR}"
	O_DAR_2="1"
fi

echo "# 90 Video
O_BREIT=${O_BREIT}
O_HOCH=${O_HOCH}
O_DAR=${O_DAR}
IN_DAR='${IN_DAR}'
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 91

if [ "${VIDEO_NICHT_UEBERTRAGEN}" != "0" ] ; then
    echo "# 100 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
    if [ -z "${IN_DAR}" ] ; then
	echo "# 110 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	echo "Es konnte das Seitenverhältnis des Bildes nicht ermittelt werden."
	echo "versuchen Sie es mit einem dieser beiden Parameter nocheinmal:"
	echo "-in_dar"
	echo "z.B. (Röhre)   : -in_dar 4:3"
	echo "z.B. (Flat)    : -in_dar 16:9"
	echo "z.B. (BluRay)  : -in_dar 480:201"
	echo "-in_par"
	echo "z.B. (PAL)     : -in_par 16:15"
	echo "z.B. (NTSC)    : -in_par  9:10"
	echo "z.B. (NTSC-DVD): -in_par  8:9"
	echo "z.B. (DVB/DVD) : -in_par 64:45"
	echo "z.B. (BluRay)  : -in_par  1:1"
	echo "ABBRUCH!"
	exit 120
    fi
fi

#----------------------------------------------------------------------#
### Seitenverhältnis des Bildes - Arbeitswerte berechnen (DAR)

DAR="$(echo "${IN_DAR}" | grep -E '[:/]')"
if [ x = "x${DAR}" ] ; then
	echo "# 130 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	DAR="$(echo "${IN_DAR}" | grep -F '.')"
	DAR_KOMMA="${DAR}"
	DAR_FAKTOR="$(echo "${DAR}" | grep -F '.' | awk '{printf "%u\n", $1*100000}')"
else
	echo "# 140 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	DAR_KOMMA="$(echo "${DAR}" | grep -E '[:/]' | awk '{gsub("[:/]"," ");print $1/$2}')"
	DAR_FAKTOR="$(echo "${DAR}" | grep -E '[:/]' | awk '{gsub("[:/]"," ");printf "%u\n", ($1*100000)/$2}')"
fi

#----------------------------------------------------------------------#
### Kontrolle Seitenverhältnis der Bildpunkte (PAR / SAR)

if [ x = "x${IN_PAR}" ] ; then
	echo "# 150 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	IN_PAR="$(echo "${IN_BREIT} ${IN_HOCH} ${DAR_KOMMA}" | awk '{printf "%.16f\n", ($2*$3)/$1}')"
fi


ARBEITSWERTE_PAR


#==============================================================================#
### Bildausschnitt

### CROPing
#
# oben und unten die schwarzen Balken entfernen
# crop=720:432:0:72
#
# von den Seiten die schwarzen Balken entfernen
# crop=540:576:90:0
#
if [ x = "x${CROP}" ] ; then
	echo "# 160 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	IN_BREIT="$(echo "${IN_XY}" | awk -F'x' '{print $1}')"
	IN_HOCH="$(echo  "${IN_XY}" | awk -F'x' '{print $2}')"
else
	#set -x
	### CROP-Seiten-Format
	echo "# 170 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	# -vf crop=width:height:x:y
	# -vf crop=in_w-100:in_h-100:100:100
	IN_BREIT="$(echo "${CROP}" | awk '{gsub("[:/]"," ");print $1}')"
	IN_HOCH="$(echo "${CROP}" | awk '{gsub("[:/]"," ");print $2}')"
	#X="$(echo "${CROP}" | awk '{gsub("[:/]"," ");print $3}')"
	#Y="$(echo "${CROP}" | awk '{gsub("[:/]"," ");print $4}')"

	### Display-Seiten-Format
	if [ x = "x${SOLL_DAR}" ] ; then
		DAR_FAKTOR="$(echo "${PAR_FAKTOR} ${IN_BREIT} ${IN_HOCH}" | awk '{printf "%u\n", ($1*$2)/$3}')"
		DAR_KOMMA="$(echo "${DAR_FAKTOR}" | awk '{print $1/100000}')"
		IN_DAR="$(echo "${O_BREIT} ${O_HOCH} ${O_DAR_1} ${O_DAR_2} ${IN_BREIT} ${IN_HOCH}" | awk '{gsub("[:/]"," "); print $2 * $3 * $5 / $1 / $4 / $6}'):1"
	else
		DAR_FAKTOR="$(echo "${O_BREIT} ${O_HOCH} ${SOLL_DAR} ${IN_BREIT} ${IN_HOCH}" | awk '{gsub("[:/]"," "); printf "%u\n", 100000*$2*$3*$1/$4/$5/$6}')"
		DAR_KOMMA="$(echo "${DAR_FAKTOR}" | awk '{print $1/100000}')"
		IN_DAR="${DAR_FAKTOR}/100000"

		PAR="$(echo "${IN_BREIT} ${IN_HOCH} ${SOLL_DAR}" | awk '{gsub("[:/]"," "); print $2 * $3 / $1 / $4}'):1"
		PAR_FAKTOR="$(echo "${PAR}" | awk '{gsub("[:/]"," "); printf "%u\n", ($1*100000)/$2}')"
		PAR_KOMMA="$(echo "${PAR_FAKTOR}" | awk '{print $1/100000}')"
	fi
	CROP="crop=${CROP},"
fi

echo "# 180 Video
O_BREIT='${O_BREIT}'
O_HOCH='${O_HOCH}'
O_DAR='${O_DAR}'
IN_DAR='${IN_DAR}'
DAR_FAKTOR='${DAR_FAKTOR}'
DAR_KOMMA='${DAR_KOMMA}'
PAR='${PAR}'
PAR_FAKTOR='${PAR_FAKTOR}'
PAR_KOMMA='${PAR_KOMMA}'
IN_BREIT='${IN_BREIT}'
IN_HOCH='${IN_HOCH}'
CROP='${CROP}'
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 190

#------------------------------------------------------------------------------#

if [ -z "${DAR_FAKTOR}" ] ; then
	echo "# 200 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	echo "Es konnte das Display-Format nicht ermittelt werden."
	echo "versuchen Sie es mit diesem Parameter nocheinmal:"
	echo "-dar"
	echo "z.B.: -dar 16:9"
	echo "ABBRUCH!"
	exit 210
fi

#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
### quadratische Bildpunkte sind der Standard

# https://ffmpeg.org/ffmpeg-filters.html#setdar_002c-setsar
FORMAT_ANPASSUNG="setsar='1/1',"

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
### Wenn die Bildpunkte vom Quell-Film und vom Ziel-Film quadratisch sind,
### dann ist es ganz einfach.
### Aber wenn nicht, dann sind diese Berechnungen nötig.

echo "# 219 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
if [ "x${ORIGINAL_DAR}" = "xNein" ] ; then
	echo "# 220 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	if [ x != "x${SOLL_DAR}" ] ; then
		echo "# 230 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
		# hier sind Modifikationen nötig, weil viele der auswählbaren Bildformate
		# keine quadratischen Pixel vorsehen
		INBREITE_DAR="$(echo "${IN_DAR}" | awk '{gsub("[:/]"," ");print $1}')"
		INHOEHE_DAR="$(echo "${IN_DAR}" | awk '{gsub("[:/]"," ");print $2}')"
		echo "# 240 Video
		# SOLL_DAR='${SOLL_DAR}'
		# INBREITE_DAR='${INBREITE_DAR}'
		# INHOEHE_DAR='${INHOEHE_DAR}'
		# BILD_BREIT='${BILD_BREIT}'
		# BILD_HOCH='${BILD_HOCH}'
		" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
		PIXELVERZERRUNG="$(echo "${SOLL_DAR} ${INBREITE_DAR} ${INHOEHE_DAR} ${BILD_BREIT} ${BILD_HOCH}" | awk '{gsub("[:/]"," ") ; pfmt=$1*$6/$2/$5 ; AUSGABE=1 ; if (pfmt < 1) AUSGABE=0 ; if (pfmt > 1) AUSGABE=2 ; print AUSGABE}')"
		#
		unset PIXELKORREKTUR

		if [ x = "x${PIXELVERZERRUNG}" ] ; then
			echo "# 250 Video
			# PIXELVERZERRUNG='${PIXELVERZERRUNG}'
			" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			exit 260
		elif [ "${PIXELVERZERRUNG}" -eq 1 ] ; then
			BREITE="$(echo "${SOLL_DAR}" | awk '{gsub("[:/]"," ");print $1}')"
			HOEHE="$(echo "${SOLL_DAR}" | awk '{gsub("[:/]"," ");print $2}')"
			echo "# 270 Video
			# quadratische Pixel
			# PIXELVERZERRUNG = 1 : ${PIXELVERZERRUNG}
			# BREITE='${BREITE}'
			# HOEHE='${HOEHE}'
			" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			#
			unset PIXELKORREKTUR
		elif [ "${PIXELVERZERRUNG}" -le 1 ] ; then
			BREITE="$(echo "${SOLL_DAR} ${INBREITE_DAR} ${INHOEHE_DAR} ${BILD_BREIT} ${BILD_HOCH}" | awk '{gsub("[:/]"," ");print $2 * $2 * $5 / $1 / $6}')"
			HOEHE="$(echo "${SOLL_DAR}" | awk '{gsub("[:/]"," ");print $2}')"
			echo "# 280 Video
			# lange Pixel: breit ziehen
			# 4CIF (Test 2)
			# PIXELVERZERRUNG < 1 : ${PIXELVERZERRUNG}
			# BREITE='${BREITE}'
			# HOEHE='${HOEHE}'
			" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			#
			PIXELKORREKTUR="scale=${BILD_BREIT}x${BILD_HOCH},"
		elif [ "${PIXELVERZERRUNG}" -ge 1 ] ; then
			BREITE="$(echo "${SOLL_DAR}" | awk '{gsub("[:/]"," ");print $1}')"
			HOEHE="$(echo "${SOLL_DAR} ${INBREITE_DAR} ${INHOEHE_DAR} ${BILD_BREIT} ${BILD_HOCH}" | awk '{gsub("[:/]"," ");print $1 * $1 * $6 / $2 / $5}')"
			echo "# 290 Video
			# breite Pixel: lang ziehen
			# 2CIF (Test 1)
			# PIXELVERZERRUNG > 1 : ${PIXELVERZERRUNG}
			# BREITE='${BREITE}'
			# HOEHE='${HOEHE}'
			" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			#
			PIXELKORREKTUR="scale=${BILD_BREIT}x${BILD_HOCH},"
		fi
	else
		if [ x = "x${SOLL_DAR}" ] ; then
			if [ "${DAR_FAKTOR}" -lt "149333" ] ; then
				BREITE="4"
				HOEHE="3"
				echo "# 300: 4/3"
				# BREITE='${BREITE}'
				# HOEHE='${HOEHE}'
				" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			else
				BREITE="16"
				HOEHE="9"
				echo "# 310: 16/9"
				# BREITE='${BREITE}'
				# HOEHE='${HOEHE}'
				" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			fi
		else
			BREITE="$(echo "${SOLL_DAR}" | awk '{gsub("[:/]"," ") ; print $1}')"
			HOEHE="$( echo "${SOLL_DAR}" | awk '{gsub("[:/]"," ") ; print $2}')"
			if [ x = "x${HOEHE}" ] ; then
				HOEHE="1"
			fi
		fi
		FORMAT_ANPASSUNG="setdar='${BREITE}/${HOEHE}',"

		echo "# 320 Video
		BREITE='${BREITE}'
		HOEHE='${HOEHE}'
		FORMAT_ANPASSUNG='${FORMAT_ANPASSUNG}'
		" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	fi
else
	if [ x = "x${SOLL_DAR}" ] ; then
		echo "# 330 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
		ORIG_DAR_BREITE="$(echo "${IN_DAR}" | awk '{gsub("[:/]"," "); print $1}')"
		ORIG_DAR_HOEHE="$(echo "${IN_DAR}" | awk '{gsub("[:/]"," "); print $2}')"
		BREITE="${ORIG_DAR_BREITE}"
		HOEHE="${ORIG_DAR_HOEHE}"
	else
		BREITE="$(echo "${SOLL_DAR}" | awk '{gsub("[:/]"," ");print $1}')"
		HOEHE="$(echo "${SOLL_DAR}" | awk '{gsub("[:/]"," ");print $2}')"
	fi
	FORMAT_ANPASSUNG="setdar='${BREITE}/${HOEHE}',"
fi

if [ x != "x${BREITE}" -a x = "x${HOEHE}" ] ; then
	HOEHE="1"
fi

echo "# 331 Video
IN_DAR=${IN_DAR}
ORIG_DAR_BREITE="${ORIG_DAR_BREITE}"
ORIG_DAR_HOEHE="${ORIG_DAR_HOEHE}"
BREITE="${BREITE}"
HOEHE="${HOEHE}"
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 332
#==============================================================================#
### Profile werden hier ausgeführt

echo "# 340 Video
PROFIL_NAME='${PROFIL_NAME}'
SOLL_XY='${SOLL_XY}'
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 341

# alle Profile laden
if [ "x" != "x${PROFIL_NAME}" ] ; then
        # -profil hls
        # -profil fullhd
        # -profil hdready
        # -profil firetv
        # -profil 1920x1080
	. ${AVERZ}/Filmwandler_profile.txt

	#----------------------------------------------------------------------#
	### das angegebene Profil wird ausgeführt

	if [ "hls" = "${PROFIL_NAME}" ] ; then
		hls
	elif [ "fullhd" = "${PROFIL_NAME}" ] ; then
		fullhd
	elif [ "hdready" = "${PROFIL_NAME}" ] ; then
		hdready
	elif [ "firetv" = "${PROFIL_NAME}" ] ; then
		firetv
	else
		universal
	fi
fi

echo "# 350 Video-Profil
SOLL_XY='${SOLL_XY}'
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 360

#==============================================================================#
#------------------------------------------------------------------------------#
### gewünschtes Rasterformat der Bildgröße (Auflösung)
### wenn ein bestimmtes Format gewünscht ist, dann muss es am Ende auch rauskommen

if [ x = "x${SOLL_XY}" ] ; then
	echo "# 370 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	unset BILD_SCALE
	unset SOLL_XY

	### ob die Pixel bereits quadratisch sind
	if [ "${PAR_FAKTOR}" -ne "100000" ] ; then
		### Umrechnung in quadratische Pixel
		#
		### [swscaler @ 0x81520d000] Warning: data is not aligned! This can lead to a speed loss
		### laut Googel müssen die Pixel durch 16 teilbar sein, beseitigt aber leider dieses Problem nicht

		echo "# 380 Video
		O_BREIT=${O_BREIT}
		O_HOCH=${O_HOCH}
		O_DAR=${O_DAR}
		IN_BREIT=${IN_BREIT}
		IN_HOCH=${IN_HOCH}
		IN_DAR=${IN_DAR}
		" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

		#exit 390

		IN_DAR="$(echo "${O_BREIT} ${O_HOCH} ${O_DAR_1} ${O_DAR_2} ${IN_BREIT} ${IN_HOCH}" | awk '{gsub(":"," ");print $2 * $3 * $5 / $1 / $4 / $6}')"
		DARFAKTOR_0="$(echo "${IN_DAR}" | awk '{printf "%u\n", ($1*100000)}')"
		#TEIL_HOEHE="$(echo "${IN_BREIT} ${IN_HOCH} ${IN_DAR} ${TEILER}" | awk '{gsub(":"," ");printf "%.0f\n", sqrt($1 * $2 * $3 / $4) / $3 / $5, $5}' | awk '{print $1 * $2}')"
		if [ "${DARFAKTOR_0}" -lt "149333" ] ; then
			echo "# 400: 4/3" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			TEIL_HOEHE="$(echo "${IN_BREIT} ${IN_HOCH} ${IN_DAR} ${TEILER}" | awk '{printf "%.0f %.0f\n", sqrt($1 * $2 / $3) / $4, $4}' | awk '{print $1 * $2}')"
			BILD_BREIT="$(echo "${TEIL_HOEHE} ${BREITE} ${HOEHE} ${TEILER}" | awk '{printf "%.0f %.0f\n", ($1 * $2 / $3) / $4, $4}' | awk '{print $1 * $2}')"
			BILD_HOCH="${TEIL_HOEHE}"
		else
			echo "# 410: 16/9" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			TEIL_BREIT="$(echo "${IN_BREIT} ${IN_HOCH} ${IN_DAR} ${TEILER}" | awk '{printf "%.0f %.0f\n", sqrt($1 * $2 * $3) / $4, $4}' | awk '{print $1 * $2}')"
			BILD_BREIT="${TEIL_BREIT}"
			BILD_HOCH="$(echo "${TEIL_BREIT} ${BREITE} ${HOEHE} ${TEILER}" | awk '{printf "%.0f %.0f\n", ($1 * $3 / $2) / $4, $4}' | awk '{print $1 * $2}')"
		fi
		BILD_SCALE="scale=${BILD_BREIT}x${BILD_HOCH},"

		echo "# 420 Video
		DARFAKTOR_0=${DARFAKTOR_0}
		BREITE='${BREITE}'
		HOEHE='${HOEHE}'
		O_BREIT='${O_BREIT}'
		O_HOCH='${O_HOCH}'
		O_DAR='${O_DAR}'
		IN_BREIT='${IN_BREIT}'
		IN_HOCH='${IN_HOCH}'
		IN_DAR='${IN_DAR}'
		TEIL_BREIT='${TEIL_BREIT}'
		TEIL_HOEHE='${TEIL_HOEHE}'
		BILD_BREIT='${BILD_BREIT}'
		BILD_HOCH='${BILD_HOCH}'
		BILD_SCALE='${BILD_SCALE}'
		" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

		#exit 421
	else
		### wenn die Pixel bereits quadratisch sind
		BILD_BREIT="${IN_BREIT}"
		BILD_HOCH="${IN_HOCH}"

		echo "# 430 Video
		BILD_BREIT='${BILD_BREIT}'
		BILD_HOCH='${BILD_HOCH}'
		" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	fi
else
	echo "# 440 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
	### Übersetzung von Bildauflösungsnamen zu Bildauflösungen
	### tritt nur bei manueller Auswahl der Bildauflösung in Kraft
	AUFLOESUNG_ODER_NAME="$(echo "${SOLL_XY}" | grep -E '[0-9][0-9][0-9][x][0-9][0-9]')"
	if [ x = "x${AUFLOESUNG_ODER_NAME}" ] ; then
		echo "# 450 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
		### manuelle Auswahl der Bildauflösung per Namen
		if [ x = "x${BILD_FORMATNAMEN_AUFLOESUNGEN}" ] ; then
			echo "# 460 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			echo "Die gewünschte Bildauflösung wurde als 'Name' angegeben: '${SOLL_XY}'"
			echo "Für die Übersetzung wird die Datei 'Filmwandler_grafik.txt' benötigt."
			echo "Leider konnte die Datei '${AVERZ}/Filmwandler_grafik.txt' nicht gelesen werden."
			exit 470
		else
			echo "# 480 Video" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
			NAME_XY_DAR="$(echo "${BILD_FORMATNAMEN_AUFLOESUNGEN}" | grep -E '[-]soll_xmaly ' | awk '{print $2,$4,$5}' | grep -E -i "^${SOLL_XY} ")"
			SOLL_XY="$(echo "${NAME_XY_DAR}" | awk '{print $2}')"
			SOLL_DAR="$(echo "${NAME_XY_DAR}" | awk '{print $3}')"

			# https://ffmpeg.org/ffmpeg-filters.html#setdar_002c-setsar
			FORMAT_ANPASSUNG="setdar='${SOLL_DAR}',"
		fi
	fi

	BILD_BREIT="$(echo "${SOLL_XY}" | sed 's/x/ /;s/^[^0-9][^0-9]*//;s/[^0-9][^0-9]*$//' | awk '{print $1}')"
	BILD_HOCH="$(echo "${SOLL_XY}" | sed 's/x/ /;s/^[^0-9][^0-9]*//;s/[^0-9][^0-9]*$//' | awk '{print $2}')"
	BILD_SCALE="scale=${SOLL_XY},"

	echo "# 490 Video
	BILD_BREIT='${BILD_BREIT}'
	BILD_HOCH='${BILD_HOCH}'
	BILD_SCALE='${BILD_SCALE}'
	" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
fi

#exit 500
#------------------------------------------------------------------------------#

if [ "x${PIXELKORREKTUR}" != x ] ; then
	echo "# 510 Video
	BILD_SCALE='${BILD_SCALE}'
	" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

	BILD_SCALE="${PIXELKORREKTUR}"

	echo "# 520 Video
	BILD_SCALE='${BILD_SCALE}'
	" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt
fi

#exit 530
#------------------------------------------------------------------------------#
### wenn das Bild hochkannt steht, dann müssen die Seiten-Höhen-Parameter vertauscht werden
### Breite, Höhe, PAD, SCALE

echo "# 540 Video
SOLL_XY		='${SOLL_XY}'
BILD_BREIT		='${BILD_BREIT}'
BILD_HOCH		='${BILD_HOCH}'
BILD_SCALE		='${BILD_SCALE}'
PIXELKORREKTUR	='${PIXELKORREKTUR}'
SOLL_BILD_SCALE 	='${SOLL_BILD_SCALE}'
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 550

if [ "x${BILD_DREHUNG}" != x ] ; then
	if [ "90" = "${BILD_DREHUNG}" ] ; then
		BILD_DREHEN
		BILD_DREHUNG=",transpose=1"
	elif [ "180" = "${BILD_DREHUNG}" ] ; then
		BILD_DREHUNG=",hflip,vflip"
	elif [ "270" = "${BILD_DREHUNG}" ] ; then
		BILD_DREHEN
		BILD_DREHUNG=",transpose=2"
	else
		echo "nur diese beiden Gradzahlen werden von der Option '-drehen' unterstützt:"
		echo "90° nach links drehen:"
		echo "		${0} -drehen 90"
		echo "90° nach rechts drehen:"
		echo "		${0} -drehen 270"
		echo "komplett einmal umdrehen:"
		echo "		${0} -drehen 180"
		exit 560
	fi
fi

#------------------------------------------------------------------------------#

echo "# 570 Video
O_BREIT		='${O_BREIT}'
O_HOCH		='${O_HOCH}'
FORMAT_ANPASSUNG	='${FORMAT_ANPASSUNG}'
PIXELVERZERRUNG	='${PIXELVERZERRUNG}'
BREITE		='${BREITE}'
HOEHE			='${HOEHE}'
NAME_XY_DAR		='${NAME_XY_DAR}'
IN_DAR		='${IN_DAR}'
IN_BREIT		='${IN_BREIT}'
IN_HOCH		='${IN_HOCH}'
CROP			='${CROP}'
SOLL_DAR		='${SOLL_DAR}'
INBREITE_DAR		='${INBREITE_DAR}'
INHOEHE_DAR		='${INHOEHE_DAR}'
IN_XY			='${IN_XY}'
Originalauflösung	='${IN_BREIT}x${IN_HOCH}'
PIXELZAHL		='${PIXELZAHL}'
SOLL_XY		='${SOLL_XY}'

BILD_BREIT		='${BILD_BREIT}'
BILD_HOCH		='${BILD_HOCH}'
BILD_SCALE		='${BILD_SCALE}'
#==============================================================================#
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 580

#------------------------------------------------------------------------------#
### PAD
# https://ffmpeg.org/ffmpeg-filters.html#pad-1
# pad=640:480:0:40:violet
# pad=width=640:height=480:x=0:y=40:color=violet
#
# max(iw\,ih*(16/9)) => https://ffmpeg.org/ffmpeg-filters.html#maskedmax
#
# pad=Bild vor dem padden:Bildecke oben links:Hintergrundfarbe
# Bild vor dem padden           = iw:ih
# Bildecke oben links           = (ow-iw)/2:(oh-ih)/2
# Hintergrundfarbe (Bildfläche) = ow:oh
#
# iw = Bildbreite vor  dem padden
# ih = Bildhöhe   vor  dem padden
# ow = Bildbreite nach dem padden
# oh = Bildhöhe   nach dem padden
#  a = iw / ih
#
# DAR = Display Aspect Ratio
# SAR = Sample  Aspect Ratio = PAR
# PAR = Pixel   Aspect Ratio = SAR
#
# PAL-TV         (720x576) : DAR  4/3, SAR 16:15 = 1,066666666666666666
# NTNC-TV        (720x486) : DAR  4/3, SAR  9:10 = 0,9
# NTSC-DVD       (720x480) : DAR 16/9, SAR 32:27 = 1,185185185185185185
# PAL-DVD / DVB  (720x576) : DAR 16/9, SAR 64:45 = 1,422222222222222222
# BluRay        (1920x1080): DAR 16/9, SAR  1:1  = 1,0
#

if [ x = "x${SOLL_DAR}" ] ; then
	echo "# 584 Video"
	BASISWERTE="${O_BREIT} ${O_HOCH} ${O_DAR_1} ${O_DAR_2} ${IN_BREIT} ${IN_HOCH} ${TEILER}"
	BREIT_QUADRATISCH="$(echo "${BASISWERTE}" | awk '{gsub("[:/]"," ") ; printf "%.0f %.0f\n", $2 * $3 * $5 / $1 / $4 / $NF, $NF}' | awk '{printf "%.0f\n", $1*$2}')"
	HOCH_QUADRATISCH="$( echo "${BASISWERTE}" | awk '{gsub("[:/]"," ") ; printf "%.0f %.0f\n", $1 * $4 * $6 / $2 / $3 / $NF, $NF}' | awk '{printf "%.0f\n", $1*$2}')"
else
	echo "# 586 Video"
	BASISWERTE="${BREITE} ${HOEHE} ${IN_BREIT} ${IN_HOCH} ${TEILER}"
	BREIT_QUADRATISCH="$(echo "${BASISWERTE}" | awk '{gsub("[:/]"," ") ; printf "%.0f %.0f\n", $1 * $4 / $2 / $NF, $NF}' | awk '{printf "%.0f\n", $1*$2}')"
	HOCH_QUADRATISCH="$( echo "${BASISWERTE}" | awk '{gsub("[:/]"," ") ; printf "%.0f %.0f\n", $2 * $3 / $1 / $NF, $NF}' | awk '{printf "%.0f\n", $1*$2}')"
fi

echo "# 590 Video
# BREITE='${BREITE}'
# HOEHE='${HOEHE}'
# BILD_DAR_HOEHE='${BILD_DAR_HOEHE}'
# O_DAR_1='${O_DAR_1}'
# O_DAR_2='${O_DAR_2}'
# BASISWERTE='${BASISWERTE}'
# BREIT_QUADRATISCH='${BREIT_QUADRATISCH}'
# HOCH_QUADRATISCH='${HOCH_QUADRATISCH}'
# IN_BREIT='${IN_BREIT}'
# IN_HOCH='${IN_HOCH}'
"

### -=-
if [ "${BREIT_QUADRATISCH}" -gt "${IN_BREIT}" ] ; then
	ZWISCHENFORMAT_QUADRATISCH="scale=${BREIT_QUADRATISCH}x${IN_HOCH},"
elif [ "${HOCH_QUADRATISCH}" -gt "${IN_HOCH}" ] ; then
	ZWISCHENFORMAT_QUADRATISCH="scale=${IN_BREIT}x${HOCH_QUADRATISCH},"
else
	ZWISCHENFORMAT_QUADRATISCH=""
fi
#
### hier wird die schwarze Hintergrundfläche definiert, auf der dann das Bild zentriert wird
# pad='[hier wird "ow" gesetzt]:[hier wird "oh" gesetzt]:[hier wird der linke Abstand gesetzt]:[hier wird der obere Abstand gesetzt]:[hier wird die padding-Farbe gesetzt]'
#  4/3 => PAD="pad='max(iw\,ih*(4/3)):ow/(4/3):(ow-iw)/2:(oh-ih)/2:black',"
# 16/9 => PAD="pad='max(iw\,ih*(16/9)):ow/(16/9):(ow-iw)/2:(oh-ih)/2:black',"
PAD="${ZWISCHENFORMAT_QUADRATISCH}pad='max(iw\\,ih*(${BREITE}/${HOEHE})):ow/(${BREITE}/${HOEHE}):(ow-iw)/2:(oh-ih)/2:black',"

echo "# 600 Video
# O_BREIT='${O_BREIT}'
# O_HOCH='${O_HOCH}'
# IN_DAR='${IN_DAR}'
# BILD_DAR_HOEHE='${BILD_DAR_HOEHE}'
# BREITE='${BREITE}'
# HOEHE='${HOEHE}'
# IN_BREIT='${IN_BREIT}'
# IN_HOCH='${IN_HOCH}'
# BASISWERTE='${BASISWERTE}'
# BREIT_QUADRATISCH='${BREIT_QUADRATISCH}'
# HOCH_QUADRATISCH='${HOCH_QUADRATISCH}'
# ZWISCHENFORMAT_QUADRATISCH='${ZWISCHENFORMAT_QUADRATISCH}'
# PAD='${PAD}'

# ENDUNG=${ENDUNG}
# VIDEO_FORMAT=${VIDEO_FORMAT}
" | tee -a "${ZIELVERZ}"/${PROTOKOLLDATEI}.txt

#exit 610

#------------------------------------------------------------------------------#
### hier wird ausgerechnen wieviele Pixel der neue Film pro Bild haben wird
### und die gewünschte Breite und Höhe wird festgelegt, damit in anderen
### Funktionen weitere Berechningen für Modus, Bitrate u.a. errechnet werden
### kann

if [ x = "x${SOLL_XY}" ] ; then
	PIXELZAHL="$(echo "${IN_BREIT} ${IN_HOCH}" | awk '{print $1 * $2}')"
	VERGLEICH_BREIT="${IN_BREIT}"
	VERGLEICH_HOCH="${IN_HOCH}"
else
	P_BREIT="$(echo "${SOLL_XY}" | awk -F'x' '{print $1}')"
	P_HOCH="$(echo "${SOLL_XY}" | awk -F'x' '{print $2}')"
	PIXELZAHL="$(echo "${P_BREIT} ${P_HOCH}" | awk '{print $1 * $2}')"
	VERGLEICH_BREIT="${P_BREIT}"
	VERGLEICH_HOCH="${P_HOCH}"
fi

#------------------------------------------------------------------------------#

