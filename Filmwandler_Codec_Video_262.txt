#==============================================================================#
#
# H.262 / MPEG-2 / DVD
#
#------------------------------------------------------------------------------#
# bei kleinen Datenraten ist MPEG-1 besser
#
# https://de.wikipedia.org/wiki/MPEG-2
#
# SP@LL   - mobile Anwendungen
#         - 176x144@15
#
# SP@ML   - PDAs
#         - 352x288@15     96 kbit/s
#         - 320x240@24    384 kbit/s
#
# MP@LL   - Set-Top-Boxen (STB)
#         - 352x288@30      4 Mbit/s
#
# MP@ML   - DVD, SD-DVB
#         - 720x480@30     15 Mbit/s
#         - 720x576@25     15 Mbit/s
#
# MP@H-14 - HDV
#         - 1440x1080@30   60 Mbit/s
#         - 1280x720@30    60 Mbit/s
#
# MP@HL   - HD-DVB (HDTV)
#         - 1920x1080@30   80 Mbit/s
#         - 1280x720@60    80 Mbit/s
#
#==============================================================================#

#VERSION="v2018090200"
#VERSION="v2023032500"           	# neue Ermittlungsmethode für Encoder
VERSION="v2023061000"			# jetzt werden Codecs konsequent in encoders gesucht

TWO_PASS="Nein"				# 2-Pass deaktiviert, es ist hier nicht vorgesehen
CODEC_PATTERN="mpeg2video"		# Beispiel: "h265|hevc"

VIDEOCODEC="$(suche_video_encoder "${CODEC_PATTERN}")"
if [ "x${VIDEOCODEC}" = "x" ] ; then
	VIDEOCODEC="$(echo "${FFMPEG_LIB}" | grep -E "${CODEC_PATTERN}" | head -n1)"
	if [ "x${VIDEOCODEC}" = "x" ] ; then
		VIDEOCODEC="$(echo "${FFMPEG_FORMATS}" | grep -E "${CODEC_PATTERN}" | head -n1)"
		if [ "x${VIDEOCODEC}" = "x" ] ; then
			echo ""
			echo "CODEC_PATTERN='${CODEC_PATTERN}'"
			echo "VIDEOCODEC='${VIDEOCODEC}'"
			echo "Leider wird dieser Codec von der aktuell installierten Version"
			echo "von FFmpeg nicht unterstützt!"
			echo ""
			exit 1
		fi
	fi
fi

VIDEO_OPTION=""

#T="3.7"
T="3"
VIDEO_QUALITAET_0="-b:v $(echo "12 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_1="-b:v $(echo "14 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_2="-b:v $(echo "16 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_3="-b:v $(echo "18 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_4="-b:v $(echo "20 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_5="-b:v $(echo "22 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_6="-b:v $(echo "24 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_7="-b:v $(echo "26 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_8="-b:v $(echo "28 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"
VIDEO_QUALITAET_9="-b:v $(echo "30 ${VERGLEICH_BREIT} ${VERGLEICH_HOCH} ${T}" | awk '{printf "%.0f\n", $1 * $2 * $3 / $4}') ${VIDEO_OPTION}"

